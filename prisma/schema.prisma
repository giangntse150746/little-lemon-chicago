// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  categoryId  String
  popular     Boolean  @default(false)
  spicy       Boolean  @default(false)
  vegetarian  Boolean  @default(false)
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservations Reservation[]
  orders      Order[]

  @@map("customers")
}

model Reservation {
  id        String   @id @default(cuid())
  customerId String
  date      DateTime
  time      String
  guests    Int
  occasion  String?
  requests  String?
  status    ReservationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model Order {
  id              String        @id @default(cuid())
  customerId      String
  orderType       OrderType
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal       @db.Decimal(10, 2)
  specialRequests String?
  deliveryAddress String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum OrderType {
  PICKUP
  DELIVERY
}
